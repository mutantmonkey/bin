#!/usr/bin/python3

import argparse
import libvirt
import os
import socket
import subprocess
import yaml


def domain_to_addr(name, uri='qemu:///system'):
    v = libvirt.open('qemu:///system')
    domain = v.lookupByName(name)
    if domain.isActive() != 1:
        raise Exception("VM is not running")

    ifaces = domain.interfaceAddresses(0)
    for iface in ifaces.values():
        return iface['addrs'][0]['addr']

    ifaces = domain.interfaceAddresses(1)
    for iface, data in ifaces.items():
        if iface != 'lo':
            for addr in data['addrs']:
                if addr['type'] == 1 and addr[0:6] == 'fe80':
                    continue
                return addr['addr']

    raise Exception("No interfaces found on VM")


def scp_if_exists(path, host, user=None, scp_args=['scp']):
    local_path = os.path.expanduser(os.path.join('~', path))
    if os.path.exists(path):
        if user is not None:
            dest = '{0}@{1}:{2}'.format(user, host, path)
        else:
            dest = '{0}@{1}'.format(host, path)

        subprocess.call(scp_args + [local_path, dest])


if __name__ == '__main__':
    default_user = "user"
    default_identity = None

    try:
        import xdg.BaseDirectory
        configpath = xdg.BaseDirectory.load_first_config(
            'appvm/config.yml')
    except ModuleNotFoundError:
        configpath = os.path.expanduser('~/.config/appvm/config.yml')

    if os.path.exists(configpath):
        config = yaml.safe_load(open(configpath))
        default_user = config.get('user', default_user)
        default_identity = config.get('identity', default_identity)

    parser = argparse.ArgumentParser(
        description="Connect to AppVMs using Xpra over SSH")
    parser.add_argument('--user', '-u', default=default_user,
                        help="SSH username")
    parser.add_argument('--identity', '-i', default=default_identity,
                        help="SSH identity file")
    parser.add_argument('--shell', action='store_true',
                        help="Connect using SSH instead of Xpra")
    parser.add_argument('--skip-libvirt', action='store_true',
                        help="Skip Libvirt (use domain name as SSH host)")
    parser.add_argument('domain_name', help="Libvirt domain name of VM")
    parser.add_argument('app', nargs='?', default="firefox",
                        help="App to launch")
    args = parser.parse_args()

    domain_name = args.domain_name

    if args.skip_libvirt:
        xpra_host = domain_name
        user = None
        identity_file = None
    else:
        split_dname = domain_name.split('@', 1)
        if len(split_dname) > 1:
            user = split_dname[0]
            domain_name = split_dname[1]
        else:
            user = args.user

        xpra_host = domain_to_addr(domain_name)
        identity_file = args.identity

    xpra_display = 10
    xpra_title = "@title@ on {0}".format(domain_name)
    app = args.app

    ssh_args = ['ssh']
    scp_args = ['scp']
    if identity_file is not None:
        ssh_args += ['-i', identity_file]
        scp_args += ['-i', identity_file]
    if user is not None:
        ssh_args += ['-l', user]
    if not args.skip_libvirt:
        hka_arg = [
            '-o',
            'HostKeyAlias=appvm:{0}:{1}'.format(socket.gethostname(),
                                                domain_name)
        ]
        ssh_args += hka_arg
        scp_args += hka_arg

    if args.shell:
        subprocess.call(ssh_args + [xpra_host])
    else:
        ssh_cmd = ' '.join(ssh_args)

        p = subprocess.call([
            'xpra', 'attach',
            'ssh/{0}/{1}'.format(xpra_host, xpra_display),
            '--ssh={0}'.format(ssh_cmd),
            '--encoding=rgb',
            '--title={0}'.format(xpra_title),
            '--tray=no',
            '--notifications=no',
            '--username=user',
            '--desktop-scaling=no',
        ])

        if p != 0:
            if len(os.environ.get('GDK_SCALE', '')) > 0:
                app = "env GDK_SCALE={0} GDK_DPI_SCALE={1} {2}".format(
                    os.environ['GDK_SCALE'],
                    os.environ.get('GDK_DPI_SCALE', '1'),
                    app)
            elif len(os.environ.get('GDK_DPI_SCALE', '')) > 0:
                app = "env GDK_DPI_SCALE={0} {1}".format(
                    os.environ.get('GDK_DPI_SCALE', '1'),
                    app)

            scp_if_exists('.config/gtk-2.0/gtkrc', xpra_host, user, scp_args)
            scp_if_exists('.config/gtk-3.0/settings.ini', xpra_host, user,
                          scp_args)

            subprocess.call([
                'xpra', 'start',
                'ssh/{0}/{1}'.format(xpra_host, xpra_display),
                '--ssh={0}'.format(ssh_cmd),
                '--encoding=rgb',
                '--title={0}'.format(xpra_title),
                '--tray=no',
                '--notifications=no',
                '--username=user',
                '--start-child={0}'.format(app),
                '--start-via-proxy=no',
                '--desktop-scaling=no',
            ])
